{
    "name": "Miva Script",
    "scopeName": "source.mivascript",
    "fileTypes": [ "mv"] ,
    "uuid": "1a3a4d44-98f3-4d0f-a124-520edd1d96c9",
    "firstLineMatch": "^<MIVA ",
    "patterns": [
        {
            "match": "(?<=\\s)(is(a(l(num|pha)|scii)|cntrl|(x?)digit|graph|(low|upp)er|p(rint|unct)|space)|glosub(_array)?|pad(l|r)|gettoken|makesessionid|mktime_t|(de|en)codeattribute|int|to(upp|low)er|substring(_var)?|len(_var)?|power|ascii(char|value)|(de|en)codeentities|indexof(i)?|file_(append|create|read(_bytes)?)|gd(Clear|Image|Last|True).+?|fsize|xml_parse_(.*?)|crypto_(.*?)|miva_array_(binarysearch|c(lear|ollapse|opy(_ref)?)|de(lete|serialize)|elements|find|insert(_(ref|var))?|m(ax|erge(_ref)?|in)|next|p(op(_ref)?|revious)|s(e(arch|rialize)|hift(_ref)?|ort))|miva_variable_value|time(zone|_t_(dayof(month|week|year)|hour|m(in|onth)|sec|year))|rsa_(.*?)|(f|s)(copy|delete|exists)|bf_(de|en)crypt|(f|s)isdir|(l|r)?trim)\\(",
            "name": "",
            "comment": "Built-in Miva functions",
            "captures":
        	{
        		"1": { "name": "constant.language.mivascript"}
        	}
        },
        {
            "match": "'([A-Z]+-[A-Z]+-[A-Z]+-[0-9]{5}|#Error#)'",
            "name": "",
            "comment": "Error codes",
            "captures":
            {

                "1": { "name": "errorcodes.mivascript" }
            }
        },
        {
            "name": "comment.mivascript",
            "begin": "<MvCOMMENT>",
            "patterns": [
                {
                    "name": "comment.mivascript",
                    "match": "."
                }
            ],
            "end": "</MvCOMMENT>",
            "comment": "Any opening/closing Miva tag"
        },
        {
            "match": "<MvFUNCTION |</MvFUNCTION>",
            "name": "mivascript.function.mivascript",
            "comment": "Any opening/closing Miva tag"
        },
        {
            "match": "<Mv([^\\s]+)|</Mv([^>]+)>|^<MIVA",
            "name": "keyword.control.mivascript",
            "comment": "Any opening/closing Miva tag"
        },
        {
            "match": "\\s*([A-Z-]+)\\s+=",
            "name": "",
            "captures": {
                "1": { "name": "entity.other.attribute-name.localname.mivascript" }
            },
            "comment": "Attributes e.g. PARAMETERS ERROROUTPUTLEVEL INDEX etc.."
        },
        {
        	"match": "([A-Za-z0-9_]+)\\(",
        	"name":	"",
        	"comment": "Matches function names",
        	"captures":
        	{
        		"1": { "name": "support.function.file.mivascript"}
        	}
        },
        {
        	"match": "\\s(EQ|GT|LT|NE|GE|LE)\\s",
        	"name": "keyword.operator.comparison.mivascript"
        },
        {
            "match": "\\s(NOT|AND|OR|ISNULL)\\s",
            "name": "keyword.operator.logical.mivascript"
        },
        {
            "match": "\\s(BIT(AND|OR|XOR|OC|SL|SR))\\s",
            "name": "keyword.operator.bitwise.mivascript"
        },
        {
        	"match": " (\\[ g\\.[^\\]]+ \\])\\.",
            "name": "",
            "captures": {
                "1": { "name": "mivascript.mvdo.mivascript" }
            },
        	"comment": "Inline MvDOs"
        }/*,
        {
        	"name": "",
        	"begin": "\"",
        	"beginCaptures":
        	{
        		"0":
        		{
        			"name": "punctuation.definition.string.begin.mivascript"
        		}
        	},
        	"patterns":
        	[
        		{ "include": "$self" },
        		{ "name": "string.mivascript", "match": "." }
        	],
        	"end": "\"",
        	"endCaptures":
        	{
        		"0":
        		{
                    "name": "punctuation.definition.string.end.mivascript"
                }
        	}
        }*/
    ]
}
