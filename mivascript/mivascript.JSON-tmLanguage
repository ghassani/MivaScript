{
    "name": "Miva Script",
    "scopeName": "source.mivascript",
    "fileTypes": [ "mv" ],
    "uuid": "1a3a4d44-98f3-4d0f-a124-520edd1d96c9",
    "firstLineMatch": "^<MIVA ",
    "patterns": [
        {
            "comment": "Built-in Miva functions",
            "name": "source.mivascript",
            "match": "(?<=\\s)(is(a(l(num|pha)|scii)|cntrl|(x?)digit|graph|(low|upp)er|p(rint|unct)|space)|glosub(_array)?|pad(l|r)|gettoken|makesessionid|mktime_t|(de|en)codeattribute|int|to(upp|low)er|substring(_var)?|len(_var)?|power|ascii(char|value)|(de|en)codeentities|indexof(i)?|file_(append|create|read(_bytes)?)|gd(Clear|Image|Last|True).+?|fsize|xml_parse_(.*?)|crypto_(.*?)|miva_array_(binarysearch|c(lear|ollapse|opy(_ref)?)|de(lete|serialize)|elements|find|insert(_(ref|var))?|m(ax|erge(_ref)?|in)|next|p(op(_ref)?|revious)|s(e(arch|rialize)|hift(_ref)?|ort))|miva_variable_value|miva_struct_members|time(zone|_t_(dayof(month|week|year)|hour|m(in|onth)|sec|year))|rsa_(.*?)|(f|s)(copy|delete|exists)|bf_(de|en)crypt|(f|s)isdir|(l|r)?trim)\\(",
            "captures": {
                "1": { "name": "constant.language.mivascript" }
            }
        },
        {
            "comment": "Match any MvCOMMENT blocks",
            "name": "comment.block.mivascript",
            "begin": "<MvCOMMENT>",
            "captures": {
                "0": { "name": "punctuation.definition.comment.mivascript" }
            },
            "end": "</MvCOMMENT>"
        },
        {
            "comment": "Any opening/closing Miva tag",
            "match": "<MvFUNCTION |</MvFUNCTION>",
            "name": "mivascript.function.mivascript"
        },
        {
            "comment": "Any opening/closing Miva tag",
            "name": "keyword.control.mivascript",
            "match": "<Mv([^\\s]+)|</Mv([^>]+)>|^<MIVA"
        },
        {
            "comment": "Attributes e.g. PARAMETERS ERROROUTPUTLEVEL INDEX etc..",
            "name": "source.mivascript",
            "match": "\\s*([A-Z-]+)\\s+=",
            "captures": {
                "1": { "name": "entity.other.attribute-name.localname.mivascript" }
            }
        },
        {
            "comment": "Comparison Operators",
            "match": "\\b(EQ|GT|LT|NE|GE|LE)\\b",
            "name": "keyword.operator.comparison.mivascript"
        },
        {
            "comment": "Logical Operators",
            "match": "\\b(NOT|AND|OR|ISNULL)\\b",
            "name": "keyword.operator.logical.mivascript"
        },
        {
            "comment": "Bitwise Operators",
            "match": "\\b(BIT(AND|OR|XOR|OC|SL|SR))\\b",
            "name": "keyword.operator.bitwise.mivascript"
        },
        {
            "comment": "Functions Calls",
            "name": "source.mivascript",
            "begin": "([A-Za-z0-9_]+)\\(",
            "beginCaptures": {
                "1": { "name": "support.function.file.mivascript" }
            },
            "patterns": [
                { "include": "$self" },
                {
                    "name": "source.mivascript",
                    "match": "."
                }
            ],
            "end": "\\)"
        },
        {
            "comment": "MvDOs",
            "name": "source.mivascript",
            "begin": "(\\[.*?\\])\\.([A-Za-z0-9_]+)\\(",
            "beginCaptures": {
                "1": { "name": "mivascript.mvdo.mivascript" },
                "2": { "name": "support.function.file.mivascript" }
            },
            "patterns": [
                { "include": "$self" },
                {
                    "name": "source.mivascript",
                    "match": "."
                }
            ],
            "end": "\\)"
        },
        {
            "comment": "Single Quoted Strings",
            "name": "string.quoted.single.mivascript",
            "begin": "'",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.begin.mivascript" }
            },
            "patterns": [
                {
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
                    "name": "constant.character.escape.mivascript"
                }
            ],
            "end": "'",
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.end.mivascript" }
            }
        }
    ]
}
